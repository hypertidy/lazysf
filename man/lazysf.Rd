% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazysf.R
\name{lazysf}
\alias{lazysf}
\alias{lazysf.character}
\alias{lazysf.SFSQLConnection}
\title{Delayed (lazy) read for simple features}
\usage{
lazysf(x, ...)

\method{lazysf}{character}(x, layer, ..., query = NA)

\method{lazysf}{SFSQLConnection}(x, layer, ..., query = NA)
}
\arguments{
\item{x}{the data source name (file path, url, or database connection string - analogous to \code{\link[sf:st_read]{sf::read_sf()}} 'dsn')}

\item{...}{currently ignored}

\item{layer}{layer name (varies by driver, may be a file name without
extension); in case \code{layer} is missing, \code{st_read} will read the
first layer of \code{dsn}, give a warning and (unless \code{quiet = TRUE})
print a message when there are multiple layers, or give an error if there
are no layers in \code{dsn}. If \code{dsn} is a database connection, then
\code{layer} can be a table name or a database identifier (see
\code{\link[DBI]{Id}}). It is also possible to omit \code{layer} and rather
use the \code{query} argument.}

\item{query}{SQL query to select records; see details}
}
\value{
a 'tbl_SFSQLConnection', extending 'tbl_lazy' (something that works with dplyr verbs, and only shows a
preview until you commit the result via \code{\link[dplyr:compute]{dplyr::collect()}})
}
\description{
Really a lazy data frame for GDAL vector data sources. Currently we must use an
explict \code{st_as_sf()} on the \code{tbl_lazy} object. Using \code{collect()} returns an unclassed
data.frame possibly with a classed \code{sfc} geometry column.
}
\examples{
# online sources can work
geojson <- file.path("https://raw.githubusercontent.com/SymbolixAU",
                     "geojsonsf/master/inst/examples/geo_melbourne.geojson")
lazysf(geojson)

## or normal stuff
f <- system.file("gpkg/nc.gpkg", package = "sf", mustWork = TRUE)
lazysf(f)
lazysf(f, query = "SELECT AREA, FIPS, geom FROM \"nc.gpkg\" WHERE AREA < 0.1")
lazysf(f, layer = "nc.gpkg") \%>\% dplyr::select(AREA, FIPS, geom) \%>\% dplyr::filter(AREA < 0.1)

shp <- lazysf(system.file("shape/nc.shp", package = "sf", mustWork = TRUE))
library(dplyr)
shp \%>\%
 filter(NAME \%LIKE\% 'A\%') \%>\%
 mutate(abc = 1.3) \%>\%
 select(abc, NAME, `_ogr_geometry_`) \%>\%
 arrange(desc(NAME))  #\%>\% show_query()
}
